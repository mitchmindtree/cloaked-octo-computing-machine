#!usr/bin/python


'''
A python program for experimenting with Simon Webber's unofficial
Google Music api.
'''


import sys, json, argparse, os
from getpass import getpass
from pprint import pprint
from gmusicapi import Mobileclient
from operator import attrgetter, itemgetter
from gmusicArtists import getArtists


def gmusicMetaFP(which):
    if which == "artists":
        return os.getcwd()+"/gmusicMetaArtists.json"
    elif which == "stations":
        return os.getcwd()+"/gmusicMetaStations.json"


def printArtists(artists): 
    print "Number of artists = ", len(artists)
    for artist in artists:
        print artist['name']
        for album in artist.get('albums'):
            print '\t', album.get('name')
            for track in album.get('tracks'):
                print '\t\t', track.get('title')
    print


def printStations(stations):
    print "Number of stations = ", len(stations)
    new = sorted(stations, key=itemgetter('kind', 'name'))
    for station in new:
        print station['kind'], station['name']
    print


def updateWhichGmusicJSON(which, data):
    print 'Creating / Overwriting', gmusicMetaFP(which)
    f = open(gmusicMetaFP(which), 'w')
    json.dump(data, f)
    f.close()
    print "Finished wrting to", gmusicMetaFP(which)


def updateGmusicJSON(mobile, args):
    '''Update JSON files containing all music metadata with Google Music mobile api''' 
    if args.gmStations:
        print "Updating 'stations' meta."
        print "Retrieving stations from Google..."
        stations = mobile.get_all_stations()
        updateWhichGmusicJSON('stations', stations)
    if args.gmArtists:
        print "Updating 'artists' meta."
        print "Retrieving songs from Google..."
        songs = mobile.get_all_songs()
        print "Creating artist dictionary using songs and Google..."
        artists = getArtists(songs, mobile)
        updateWhichGmusicJSON('artists', artists)


def loadWhichGmusicMeta(which):
    '''Loads specified type of Google Music metadata from JSON'''
    print 'Loading', which, 'from json.'
    f = open(gmusicMetaFP(which), 'r')
    gmusicmeta = json.load(f)
    f.close()
    return gmusicmeta


def loadGmusicMeta(args):
    '''Load the Google Music metadata from the .json and return as a dictionary containing artists&&||stations.'''
    gmusicmeta = {}
    if args.gmStations:
        gmusicmeta['stations'] = loadWhichGmusicMeta('stations')
    if args.gmArtists:
        gmusicmeta['artists'] = loadWhichGmusicMeta('artists') 
    return gmusicmeta


def authGoogleMusic(mobile): 
    count = 0
    while True:
        usr = raw_input("Enter your Google Music e-mail: ")
        pw = getpass() 
        if mobile.login(usr, pw):
            print "Logged in successfully."
            break
        elif count < 3:
            print "Login failed, try again fool!"
            count = count+1
        else:
            raise Exception("Failed to log in, you absolute nugget! Gonna have to quit now...")
            sys.exit(0)


def getGoogleMusicMeta(args):
    '''Authorise google music api and if update is true, update JSON with api'''
    print "Gmusic Bizz all up innit... Loading client."
    mobile = Mobileclient()
    authGoogleMusic(mobile)
    if args.update:
        updateGmusicJSON(mobile, args)
    gmusicmeta = loadGmusicMeta(args)
    return gmusicmeta
        

def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--update", help="update the music meta-database with selected services", action="store_true")
    parser.add_argument("-gmst", "--gmStations", help="retrieve/update Google Music station meta.", action="store_true")
    parser.add_argument("-gmar", "--gmArtists", help="retrieve/update Google Music artsist meta.", action="store_true")
    args = parser.parse_args()
    if args.gmArtists or args.gmStations:
        gmusicmeta = getGoogleMusicMeta(args)
        pprint(gmusicmeta)
        print "There's yo shizz nigga!"
        

if __name__ == "__main__" and len(sys.argv) == 3:
    main(sys.argv[1:]) 

